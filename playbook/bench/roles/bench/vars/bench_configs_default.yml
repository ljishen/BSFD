---
# This file is used for combining all benchmark configurations.
# Use bench_configs.yml if you want to test some individual cases.

benchmarks:
  - name: sysbench
    desc: "CPU & Memory & File I/O performance test"
    docker_image: ljishen/sysbench
    configs:
      # CPU performance test
      - desc: "CPU performance test: max-prime=20000"
        args:
          run: "##OUTPUT_FILE## --test=cpu --cpu-max-prime=20000 run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=cpu --cpu-max-prime=20000 run"
        output_file_suffix: "cpu_20000.prof"
      - desc: "CPU performance test: max-prime=500000"
        args:
          run: "##OUTPUT_FILE## --test=cpu --cpu-max-prime=500000 run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=cpu --cpu-max-prime=500000 run"
        output_file_suffix: "cpu_500000.prof"
      - desc: "CPU performance test: max-prime=1000000"
        args:
          run: "##OUTPUT_FILE## --test=cpu --cpu-max-prime=1000000 run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=cpu --cpu-max-prime=1000000 run"
        output_file_suffix: "cpu_1000000.prof"
 
      # Memory functions speed test
      - desc: "Memory functions speed test: memory-block-size=1K, memory-oper=read, memory-access-mode=seq"
        args:
          run: "##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=read --memory-access-mode=seq run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=read --memory-access-mode=seq run"
        output_file_suffix: "memory_1k_read_seq.prof"
      - desc: "Memory functions speed test: memory-block-size=1K, memory-oper=write, memory-access-mode=seq"
        args:
          run: "##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=write --memory-access-mode=seq run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=write --memory-access-mode=seq run"
        output_file_suffix: "memory_1k_write_seq.prof"
      - desc: "Memory functions speed test: memory-block-size=1K, memory-oper=read, memory-access-mode=rnd"
        args:
          run: "##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=read --memory-access-mode=rnd run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=read --memory-access-mode=rnd run"
        output_file_suffix: "memory_1k_read_rnd.prof"
      - desc: "Memory functions speed test: memory-block-size=1K, memory-oper=write, memory-access-mode=rnd"
        args:
          run: "##OUTPUT_FILE## --test=memory --memory-block-size=1K, --memory-oper=write --memory-access-mode=rnd run"
          docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=memory --memory-block-size=1K --memory-oper=write --memory-access-mode=rnd run"
        output_file_suffix: "memory_1k_write_rnd.prof"

      # File I/O test
      - desc: "File I/O test: file preparation - file-num=128, file-total-size=100G"
        args:
          run: "##OUTPUT_FILE## --test=fileio --file-num=128 --file-total-size=100G prepare"
          docker_run: "-v `pwd`:/root/results -v `pwd`/workdir:/root/workdir ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=fileio --file-num=128 --file-total-size=100G prepare"
        output_file_suffix: "fileio_prepare_num_128_size_100g.log"
      - desc: "File I/O test: run - file-num=128, file-total-size=100G, max-time=300, max-requests=0, num-threads=1, file-test-mode=rndrw"
        args:
          run: "##OUTPUT_FILE## --test=fileio --file-num=128 --file-total-size=100G --max-time=300 --max-requests=0 --num-threads=1 --file-test-mode=rndrw run"
          docker_run: "-v `pwd`:/root/results -v `pwd`/workdir:/root/workdir ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=fileio --file-num=128 --file-total-size=100G --max-time=300 --max-requests=0 --num-threads=1 --file-test-mode=rndrw run"
        output_file_suffix: "fileio_run_num_128_size_100g_time_300sec_1_thread_rndrw.prof"
      - desc: "File I/O test: file cleanup"
        args:
          run: "##OUTPUT_FILE## --test=fileio cleanup"
          docker_run: "-v `pwd`:/root/results -v `pwd`/workdir:/root/workdir ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --test=fileio cleanup"
        output_file_suffix: "fileio_cleanup.log"

  - name: stress-ng
    desc: "CPU & Memory & I/O & Network performance test"
    docker_image: ljishen/stress-ng
    ignore_errors: True
    configs:
      - desc: "CPU performance test: class=cpu"
        args:
          run: "--yaml ##OUTPUT_FILE## --timeout 60s --class cpu --sequential 1"
          docker_run: "--cap-add=SYS_RESOURCE -v `pwd`:/root/results ##CONTAINER_ID## --yaml /root/results/##OUTPUT_FILE## --timeout 60s --class cpu --sequential 1"
        output_file_suffix: "cpu.prof"
      - desc: "CPU Cache performance test: class=cpu-cache"
        args:
          run: "--yaml ##OUTPUT_FILE## --timeout 60s --class cpu-cache --sequential 1"
          docker_run: "--cap-add=SYS_RESOURCE -v `pwd`:/root/results ##CONTAINER_ID## --yaml /root/results/##OUTPUT_FILE## --timeout 60s --class cpu-cache --sequential 1"
        output_file_suffix: "cpu-cache.prof"
      - desc: "Memory performance test: class=memory"
        args:
          run: "--yaml ##OUTPUT_FILE## --timeout 60s --class memory --sequential 1"
          docker_run: "--cap-add=SYS_RESOURCE -v `pwd`:/root/results ##CONTAINER_ID## --yaml /root/results/##OUTPUT_FILE## --timeout 60s --class memory --sequential 1"
        output_file_suffix: "memory.prof"
      - desc: "I/O performance test: class=io"
        args:
          run: "--yaml ##OUTPUT_FILE## --timeout 60s --class io --sequential 1"
          docker_run: "--cap-add=SYS_RESOURCE -v `pwd`:/root/results ##CONTAINER_ID## --yaml /root/results/##OUTPUT_FILE## --timeout 60s --class io --sequential 1"
        output_file_suffix: "io.prof"
      - desc: "Network performance test: class=network"
        args:
          run: "--yaml ##OUTPUT_FILE## --timeout 60s --class network --sequential 1"
          docker_run: "--cap-add=SYS_RESOURCE -v `pwd`:/root/results ##CONTAINER_ID## --yaml /root/results/##OUTPUT_FILE## --timeout 60s --class network --sequential 1"
        output_file_suffix: "network.prof"

  - name: pmbw
    desc: "Memory Bandwidth test"
    docker_image: ljishen/pmbw
    configs:
      - desc: "Memory Bandwidth test: (maximum amount of memory allocated at startup)=1G, (Run benchmarks with at most this thread count)=1"
        args:
          run: "pmbw ##OUTPUT_FILE## -M 1073741824 -P 1"
          # use the Docker host network stack because we need to set the host name correctly in the result file, or else the container id is used.
          docker_run: "--network host -v `pwd`:/root/results ##CONTAINER_ID## pmbw /root/results/##OUTPUT_FILE## -M 1073741824 -P 1"
        output_file_suffix: "memory_m1_p1.prof"

  - name: iperf3
    desc: "Network bandwidth performance test"
    docker_image: ljishen/iperf3
    skip: True
    configs:
      - desc: "Network bandwidth test: UDP, 160 KByte socket buffer size"
        args:
            run: "##OUTPUT_FILE## --client {{ iperf3_server }} --udp --interval 1 --time 20 --window 160k"
            docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --client {{ iperf3_server }} --udp --interval 1 --time 20 --window 160k"
        output_file_suffix: "udp_w160k.prof"
      - desc: "Network bandwidth test: TCP, 2 KByte window size"
        args:
            run: "##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 2k"
            # FIXME: Error message "iperf3: error - the server is busy running a test. try again later" when execute docker run a second time
            docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 2k"
        output_file_suffix: "tcp_w2k.prof"
      - desc: "Network bandwidth test: TCP, 85 KByte window size"
        args:
            run: "##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 85k"
            docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 85k"
        output_file_suffix: "tcp_w85k.prof"
      - desc: "Network bandwidth test: TCP, 200 KByte window size"
        args:
            run: "##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 200k"
            docker_run: "-v `pwd`:/root/results ##CONTAINER_ID## /root/results/##OUTPUT_FILE## --client {{ iperf3_server }} --time 20 --window 200k"
        output_file_suffix: "tcp_w200k.prof"
